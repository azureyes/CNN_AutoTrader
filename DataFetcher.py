# -*- coding: utf-8 -*-
"""
Created on Fri Apr 20 10:26:32 2018

@author: yewei
"""

import tushare as ts
from datetime import date
import pandas as pd
import os

defaultStartDate = '2007-01-01'
defaultEndDate = str(date.today())
isIndex = False

INDEX_LIST = [u'002233', u'600687', u'002368', u'002001', u'000969', u'600757', u'600393', u'600100', u'002444', u'600089', u'300033', u'600729', u'600547', u'601985', u'002428', u'600900', u'002008', u'600750', u'600125', u'600316', u'000069', u'600332', u'600108', u'600682', u'600416', u'000156', u'600869', u'601021', u'002375', u'600086', u'002078', u'001696', u'002056', u'601155', u'002051', u'000338', u'600122', u'600187', u'601880', u'000100', u'002221', u'000981', u'600518', u'002044', u'002434', u'600663', u'600835', u'000669', u'601009', u'600594', u'600657', u'000680', u'000718', u'600176', u'603169', u'002699', u'000988', u'000778', u'300001', u'600525', u'002317', u'601939', u'600298', u'002266', u'002465', u'002063', u'600478', u'000538', u'600338', u'002470', u'000006', u'000157', u'000612', u'600718', u'600284', u'600160', u'601311', u'600104', u'002466', u'002049', u'603816', u'600580', u'603019', u'000830', u'000786', u'002544', u'000031', u'600939', u'300058', u'002673', u'002714', u'600011', u'002028', u'600151', u'002190', u'600837', u'002294', u'601633', u'002681', u'000939', u'600309', u'002250', u'000938', u'601607', u'600177', u'600584', u'002815', u'000061', u'300144', u'600751', u'600549', u'000627', u'000636', u'002608', u'601163', u'601099', u'600566', u'002583', u'002352', u'002183', u'002019', u'002174', u'300251', u'603883', u'000423', u'600300', u'002551', u'600582', u'000596', u'601688', u'002426', u'002663', u'600362', u'002408', u'002707', u'600919', u'600635', u'002332', u'000592', u'002022', u'600208', u'600267', u'002701', u'002670', u'600521', u'603799', u'300017', u'000667', u'600717', u'000513', u'600050', u'600031', u'000566', u'000887', u'000519', u'002468', u'300297', u'300147', u'000426', u'000926', u'600811', u'000703', u'002739', u'600737', u'000049', u'002354', u'600674', u'000060', u'002558', u'002106', u'600839', u'601800', u'601555', u'601997', u'600545', u'002273', u'601811', u'600346', u'603806', u'000877', u'002024', u'000825', u'002236', u'601016', u'600875', u'600481', u'002018', u'601933', u'600240', u'300122', u'000723', u'000501', u'002241', u'000671', u'002437', u'002146', u'002038', u'600004', u'601877', u'601127', u'300070', u'002344', u'601216', u'600648', u'603328', u'300197', u'600111', u'601118', u'300182', u'600741', u'600438', u'000401', u'000876', u'600585', u'002602', u'002450', u'600388', u'000783', u'000547', u'600066', u'002371', u'000987', u'002572', u'600862', u'002477', u'000975', u'600138', u'601898', u'601699', u'600048', u'000528', u'600516', u'000027', u'000685', u'300166', u'002665', u'600277', u'600660', u'600618', u'600064', u'600637', u'002358', u'600575', u'600859', u'002261', u'600754', u'600259', u'300324', u'002390', u'600157', u'000998', u'000025', u'002191', u'600019', u'002573', u'000568', u'600409', u'002831', u'002475', u'002506', u'002027', u'600787', u'600926', u'601718', u'600936', u'600517', u'603658', u'000572', u'000963', u'600171', u'600184', u'600018', u'000729', u'600536', u'600056', u'002500', u'600458', u'002223', u'600664', u'601233', u'300113', u'000078', u'600623', u'002405', u'600017', u'300291', u'601611', u'002491', u'000709', u'601390', u'600074', u'002073', u'600572', u'002555', u'600039', u'601988', u'600645', u'600881', u'600996', u'600373', u'601969', u'000732', u'601777', u'002153', u'600500', u'600820', u'002366', u'600158', u'002280', u'601899', u'600773', u'002456', u'601225', u'603589', u'000895', u'603001', u'002230', u'600276', u'600748', u'600959', u'600863', u'000897', u'600557', u'002092', u'600970', u'600169', u'002195', u'600059', u'600499', u'601168', u'002292', u'000536', u'600600', u'000661', u'600161', u'002807', u'601878', u'002489', u'603198', u'002244', u'601628', u'000999', u'603515', u'002123', u'601881', u'600233', u'300266', u'002281', u'002325', u'601901', u'000806', u'002508', u'600266', u'600029', u'000413', u'300124', u'300039', u'002002', u'600655', u'600085', u'002142', u'300315', u'000728', u'600673', u'600016', u'603077', u'000758', u'002512', u'002517', u'600068', u'600201', u'002745', u'002152', u'601211', u'000002', u'300088', u'603858', u'000930', u'600801', u'002410', u'000898', u'600153', u'600415', u'601228', u'002416', u'600694', u'600015', u'000333', u'603766', u'002342', u'002345', u'603444', u'600383', u'002642', u'002064', u'000766', u'600126', u'601991', u'600795', u'600058', u'600967', u'600053', u'000792', u'000848', u'600739', u'600280', u'000630', u'600325', u'300133', u'601857', u'603228', u'600292', u'601966', u'002797', u'601788', u'603025', u'000158', u'601866', u'000540', u'300059', u'002118', u'601088', u'300383', u'000662', u'600498', u'000425', u'300274', u'000961', u'002271', u'603556', u'001979', u'600597', u'601166', u'600141', u'601992', u'600282', u'601333', u'603000', u'002839', u'603225', u'600410', u'600578', u'300115', u'002032', u'002640', u'603569', u'601872', u'002422', u'002179', u'600317', u'601928', u'300010', u'300273', u'600816', u'000878', u'600435', u'600535', u'000543', u'600062', u'600436', u'300136', u'601375', u'000979', u'600894', u'601001', u'002041', u'002424', u'600312', u'600909', u'000652', u'601128', u'000563', u'601288', u'600887', u'000402', u'002588', u'002385', u'002252', u'600352', u'600289', u'600639', u'601608', u'600685', u'600307', u'002411', u'000001', u'600884', u'600872', u'601012', u'000400', u'601600', u'600628', u'002709', u'000028', u'000959', u'603355', u'600588', u'002242', u'600908', u'002415', u'601398', u'000681', u'601002', u'601000', u'600640', u'002308', u'600583', u'601888', u'000066', u'300043', u'603568', u'002503', u'000559', u'300072', u'002479', u'002268', u'600221', u'300199', u'300202', u'002011', u'000983', u'601668', u'000776', u'603877', u'300024', u'600808', u'300244', u'002155', u'600743', u'000727', u'002147', u'000858', u'600642', u'300116', u'600028', u'000089', u'000039', u'000829', u'601678', u'002285', u'600094', u'600633', u'600006', u'600522', u'600196', u'600614', u'603188', u'000625', u'002310', u'000418', u'000488', u'603888', u'601318', u'000937', u'600503', u'002030', u'603369', u'603160', u'600770', u'002439', u'600482', u'600009', u'600390', u'300026', u'600643', u'603993', u'300015', u'600703', u'002340', u'000587', u'600115', u'000686', u'000738', u'600977', u'002440', u'600073', u'600649', u'000552', u'000415', u'600392', u'002304', u'600155', u'600195', u'002353', u'300253', u'603528', u'002131', u'300376', u'600688', u'600270', u'600060', u'000777', u'600895', u'600038', u'601018', u'000166', u'000541', u'601958', u'601766', u'600030', u'600958', u'600219', u'300257', u'600369', u'000860', u'600291', u'002299', u'600380', u'601919', u'002400', u'000997', u'002276', u'600340', u'000600', u'002007', u'000990', u'002460', u'300055', u'600704', u'002202', u'000581', u'000960', u'600885', u'000826', u'002407', u'600329', u'600489', u'601377', u'002005', u'002601', u'600406', u'601229', u'002269', u'002672', u'600010', u'300159', u'600395', u'601117', u'000816', u'600418', u'002122', u'002818', u'600978', u'600166', u'002277', u'002505', u'002603', u'600776', u'600690', u'000021', u'002081', u'600376', u'000090', u'600256', u'000839', u'002050', u'600563', u'000012', u'600120', u'600893', u'002359', u'600260', u'600315', u'601212', u'600519', u'600871', u'600880', u'002251', u'002254', u'601818', u'601006', u'002128', u'002176', u'002065', u'600037', u'600026', u'000690', u'600426', u'002127', u'600366', u'601200', u'300003', u'600118', u'600079', u'600823', u'603377', u'600705', u'000656', u'601336', u'000651', u'600999', u'002373', u'600021', u'000598', u'002013', u'600143', u'600759', u'002004', u'600460', u'002463', u'002657', u'601998', u'002048', u'000762', u'601231', u'600827', u'600971', u'600036', u'600651', u'601111', u'600000', u'002249', u'600372', u'600874', u'300002', u'601198', u'002431', u'600428', u'600587', u'603868', u'000062', u'300134', u'600023', u'601618', u'600993', u'000623', u'600008', u'002311', u'600611', u'300032', u'002635', u'600061', u'600170', u'600755', u'601717', u'600606', u'600466', u'000977', u'300027', u'002841', u'300287', u'601169', u'600348', u'600598', u'000712', u'600804', u'600886', u'601689', u'603833', u'600570', u'600297', u'002384', u'601328', u'000050', u'601601', u'600188', u'002736', u'600917', u'002093', u'600109', u'000008', u'002482', u'000768', u'600098', u'002624', u'300146', u'600271', u'600485', u'000750', u'600826', u'601727', u'002414', u'002594', u'002074', u'000725', u'601020', u'000503', u'002392', u'600022', u'600216', u'600848', u'600422', u'600765', u'600183', u'000063', u'601989', u'600879', u'000009', u'000761', u'000970', u'600335', u'000099', u'600511', u'600179', u'601669', u'000807', u'601186', u'002690', u'600565', u'002589']

#code = input("Input Index Code : ")
startDate = input("Input Start Date (%s) : " %defaultStartDate)
endDate = input("Input End Date (%s) : " %defaultEndDate)


startIdx1 = input("Input Start Num (0): ")
if startIdx1=='':
    startIdx = 0
else:
    startIdx = int(startIdx1)

currIdx = 0
for code in INDEX_LIST:
    
    print('Curr Processing Index : %d' %currIdx)
    
    if currIdx < startIdx:
        currIdx+=1
        continue
    
    currIdx+=1
    try:
       
        if startDate=="":
            startDate = defaultStartDate
        if endDate=="":
            endDate = defaultEndDate
            
        outputFileName = 'DataDownload/Data_%s_(%s)_(%s).csv' %(code, startDate, endDate)
        print('Data Download to : %s' %outputFileName)
        
        if os.path.exists(outputFileName):
            print('%s already exist! skip it! ...' %outputFileName)
            continue
        
        df = ts.get_k_data(code, index=isIndex, start=str(startDate), end=str(endDate))
        del df['date']
        del df['code']
        df = df.reset_index(drop=True)
        
        rows = len(df)
        
        print('Data has %d Rows ... ' %rows)
        
        #data process
        TRAIN_DAYS = 16
        PERDICT_DAYS = 1
        RANGE_END = rows-TRAIN_DAYS-(PERDICT_DAYS-1)
        
        if rows<=TRAIN_DAYS+(PERDICT_DAYS-1):
            continue
            
        table = pd.DataFrame()
        for i in range(0, TRAIN_DAYS):
            colname1 = 'O%d' %i
            colname2 = 'C%d' %i
            colname3 = 'H%d' %i
            colname4 = 'L%d' %i
            colname5 = 'V%d' %i
            table[colname1] = None
            table[colname2] = None
            table[colname3] = None
            table[colname4] = None
            table[colname5] = None
        table['UP'] = None
        table['DOWN'] = None
        
        for i in range(0, RANGE_END):
            growth = float(df['close'][(i+TRAIN_DAYS+(PERDICT_DAYS-1))]) / float(df['close'][(i+TRAIN_DAYS)-1]) - 1
            kdatapart = df[i:i+TRAIN_DAYS]
            kdatapart = kdatapart.reset_index(drop=True)
            lowlist = []
            volumelist = []
            feeddata = []
            for j in range(0, len(kdatapart)):
                lowlist.append(float(kdatapart['low'][j]))
                volumelist.append(float(kdatapart['volume'][j]))
            low_min = min(lowlist)
            low_max = max(lowlist)
            volume_min = min(volumelist)
            volume_max = max(volumelist)
            for j in range(0, len(kdatapart)):
                fopen = float(kdatapart['open'][j])
                fclose = float(kdatapart['close'][j])
                fhigh = float(kdatapart['high'][j])
                flow = float(kdatapart['low'][j])
                fvolume = float(kdatapart['volume'][j])
                unified_open = (fopen-low_min)/(low_max-low_min)
                unified_close = (fclose-low_min)/(low_max-low_min)
                unified_high = (fhigh-low_min)/(low_max-low_min)
                unified_low = (flow-low_min)/(low_max-low_min)
                unified_vol = (fvolume-volume_min)/(volume_max-volume_min)
                feeddata.append(unified_open)
                feeddata.append(unified_close)
                feeddata.append(unified_high)
                feeddata.append(unified_low)
                feeddata.append(unified_vol)
            up = 1.0
            down = 0.0
            if growth*100.0>=0.16:
                up = 1.0
                down = 0.0
            else:
                up = 0.0
                down = 1.0
            feeddata.append(up)
            feeddata.append(down)
            
            table.loc[len(table.index)] = feeddata
            
            if i%100==0:
                percent = i / float(RANGE_END) * 100.0
                print("Exporting %0.2f%% ..." %percent)
        
        print('Saving To %s ...' %outputFileName)
        
        table = table.dropna(axis=0, how='any')
        table = table.drop_duplicates()
        
        table.to_csv(path_or_buf=outputFileName, index=False, header=True)
        
        print('Data Saved ...')
        
    except:
        continue